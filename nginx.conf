worker_processes auto;

events {
    worker_connections 1024;
}
http {

    ## Main Server Block
    server {
        ## Open by default.
        listen                8080;
        server_name           community.staging.fellesdatakatalog.digdir.no;
        client_max_body_size  200M;

        #redirect http -> https
        if ($http_x_forwarded_proto = "http") {
            return 301 https://$host$request_uri;
        }

        # Enable compression both for HTTP/1.0 and HTTP/1.1.
        gzip_http_version  1.1;

        # Compression level (1-9).
        # 5 is a perfect compromise between size and cpu usage, offering about
        # 75% reduction for most ascii files (almost identical to level 9).
        gzip_comp_level    5;

        # Gzip compression
        gzip on;
        gzip_types
            application/atom+xml
            application/javascript
            application/json
            application/rss+xml
            application/x-font-ttf
            application/x-web-app-manifest+json
            application/xhtml+xml
            application/xml
            font/opentype
            image/svg+xml
            image/x-icon
            text/css
            text/plain
            text/x-component
            text/turtle;
        gzip_proxied    no-cache no-store private expired auth;
        gzip_min_length 1000;

        # Compress data even for clients that are connecting to us via proxies,
        # identified by the "Via" header (required for CloudFront).
        gzip_proxied       any;

        # Tell proxies to cache both the gzipped and regular version of a resource
        # whenever the client's Accept-Encoding capabilities header varies;
        # Avoids the issue where a non-gzip capable client (which is extremely rare
        # today) would display gibberish if their proxy gave them the gzipped version.
        gzip_vary          on;

        add_header Vary 'Accept, Accept-Encoding';
        add_header X-Robots-Tag 'noindex, nofollow, nosnippet, noarchive' always;
        # Protect against 'ClickJacking' attacks.
        add_header X-Frame-Options DENY;
        # Prevent older versions of Internet Explorer and Chrome to perform MIME-sniffing
        # on the response body, potentially causing the response body to be interpreted
        # and displayed as a content type other than the declared content type.
        # Current (early 2014) and legacy versions of Firefox will use the declared content
        # type (if one is set), rather than performing MIME-sniffing.
        add_header X-Content-Type-Options nosniff;
        # Content Security Policy (CSP) is an added layer of security that helps to detect
        # and mitigate certain types of attacks, including Cross Site Scripting (XSS) and
        # data injection attacks. These attacks are used for everything from data theft to
        # site defacement to distribution of malware.
        add_header Content-Security-Policy: default-src 'self' community.staging.fellesdatakatalog.digdir.no
        add_header Access-Control-Allow-Origin community.staging.fellesdatakatalog.digdir.no
            
        #healthcheck
        location /ready {
            rewrite /ready /ping break;
            proxy_pass http://fdk-community-service:8080;
        }

        #livenesscheck
        location /ping {
            proxy_pass http://fdk-community-service:8080;
        }

        ## Default site location.
        location / {            
            proxy_pass http://fdk-community-service:8080;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }

    }
}
